import { chromium, Browser, BrowserContext, Page, BrowserContextOptions } from 'playwright';
import path from 'path';
import fs from 'fs/promises';
import dotenv from 'dotenv';
import winston from 'winston';
import { downloadFile } from './utils/fileUtils';
import { exec } from 'child_process';
import util from 'util';
import { initializeDaemonBrowser, postReplyToTweet } from './services/twitterInteractionService';

const execPromise = util.promisify(exec);

// Configure environment
dotenv.config();

// Constants
const COOKIE_PATH = path.join(process.cwd(), 'cookies', 'twitter-cookies.json');
const TEMP_VIDEO_DIR = path.join(process.cwd(), 'temp_video_test');
const LOG_DIR = path.join(process.cwd(), 'logs');
const SCREENSHOT_DIR = path.join(process.cwd(), 'debug-screenshots');

// Set up logging
const logger = winston.createLogger({
  level: 'debug',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level.toUpperCase()}] [PW-VIDEO-POST-TEST] ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ 
      filename: path.join(LOG_DIR, 'test-pw-video-post.log'),
      options: { flags: 'w' }
    })
  ]
});

// Create directories if they don't exist
async function ensureDirectoryExists(directory: string) {
  try {
    await fs.access(directory);
  } catch (error) {
    await fs.mkdir(directory, { recursive: true });
  }
}

// Re-add Playwright login check function
async function checkLoginStatus(page: Page): Promise<boolean> {
    logger.info('Checking login status via /home...');
    try {
        await page.goto('https://twitter.com/home', { waitUntil: 'domcontentloaded', timeout: 30000 });
        logger.info('Navigated to /home page structure.');
        logger.info('Waiting 10 seconds for dynamic content...'); // Keep 10s wait for now
        await page.waitForTimeout(10000); 

        const successIndicators = [
            '[data-testid="primaryColumn"]',                
            'aside[aria-label*="Account menu"]',            
            '[data-testid="SideNav_NewTweet_Button"]'       
        ];
        
        for (const selector of successIndicators) {
             if (await page.locator(selector).first().isVisible({ timeout: 5000 }).catch(() => false)) {
                 logger.info(`✅ Login status verified! (Indicator: ${selector})`);
                 await page.screenshot({ path: path.join(SCREENSHOT_DIR, 'test-video-post-login-check-success.png') });
                 return true;
             }
        }
        logger.warn('❌ Login check failed: No success indicators visible on /home.');
        await page.screenshot({ path: path.join(SCREENSHOT_DIR, 'test-video-post-login-check-fail.png') });
        return false;
    } catch (error) {
        logger.error('Error during login check navigation/verification:', error);
        try { await page.screenshot({ path: path.join(SCREENSHOT_DIR, 'test-video-post-login-check-error.png') }); } catch {}
        return false;
    }
}

// Main test function
async function testPlaywrightVideoPost() {
  logger.info('Starting Test: Post Pre-Generated MP4 Reply via PLAYWRIGHT');
  
  await ensureDirectoryExists(LOG_DIR);
  await ensureDirectoryExists(TEMP_VIDEO_DIR);
  await ensureDirectoryExists(SCREENSHOT_DIR);
  await ensureDirectoryExists(path.dirname(COOKIE_PATH)); 
  
  // --- Configuration --- 
  // Path to the video file generated by a previous test run
  const videoFilename = 'free-memecoin-launch-zh_api_test.mp4'; // **Make sure this filename is correct**
  const videoToPostPath = path.join(TEMP_VIDEO_DIR, videoFilename);

  const testReplyTweetUrl = 'https://x.com/RyanAtSpeechlab/status/1911421752871211011'; 
  const replyText = `[PW-RETEST] Attaching existing video ${videoFilename} (${new Date().toISOString()})`;
  // --------------------

  let generatedVideoPath: string | undefined = videoToPostPath; // Use the direct path
  
  let browser: Browser | null = null;
  let context: BrowserContext | null = null;
  let page: Page | null = null;

  try {
    // --- Part 1: Verify Existing Video File --- 
    logger.info('--- Phase 1: Verifying Pre-Generated Video File ---');
    try {
        await fs.access(generatedVideoPath);
        logger.info(`✅ Found video file to post: ${generatedVideoPath}`);
    } catch (fileError) {
        logger.error(`❌ Video file NOT FOUND at: ${generatedVideoPath}`);
        logger.error(`Please ensure the file exists from a previous test run or generate it again.`);
        return; // Cannot proceed without the video
    }

    // --- Part 2: Post to Twitter using Playwright --- 
    logger.info('--- Phase 2: Posting Video Reply via Playwright ---'); 

    logger.info('Initializing Playwright browser for posting...');
    const browserInfo = await initializeDaemonBrowser(); 
    browser = browserInfo.browser;
    context = browserInfo.context;
    page = await context.newPage();

    const isLoggedIn = await checkLoginStatus(page);
    if (!isLoggedIn) {
        logger.error('Login check failed after initializing browser. Ensure valid cookies/state exist.');
        throw new Error('Test cannot proceed without login.');
    }
    logger.info('Login verified. Proceeding to post reply...');

    // Call the Playwright-based postReplyToTweet function
    const postSuccess = await postReplyToTweet(
        page, 
        testReplyTweetUrl, 
        replyText, 
        generatedVideoPath // Pass the path to the video
    );

    if (postSuccess) {
        logger.info(`✅✅ Successfully posted Playwright reply with video to ${testReplyTweetUrl}`);
    } else {
        logger.error(`❌❌ Failed to post Playwright reply with video to ${testReplyTweetUrl}`);
    }

  } catch (error) {
    logger.error('Error during test execution:', error);
  } finally {
    // Browser Cleanup
     logger.info('Cleaning up browser...');
    if (page) await page.close().catch(e => logger.warn('Error closing page:', e));
    if (context) await context.close().catch(e => logger.warn('Error closing context:', e));
    if (browser) await browser.close().catch(e => logger.warn('Error closing browser:', e));

    // Keep temp file cleanup DISABLED
     logger.info('Skipping cleanup of temp video file as requested.');
    logger.info('Test finished.');
  }
}

// Run the test
testPlaywrightVideoPost().catch(error => {
  logger.error('Unhandled error in main test function:', error);
  process.exit(1);
}); 